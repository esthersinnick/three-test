{"version":3,"sources":["img/bg01B.png","img/bg02.png","img/smoke-1.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","style","height","width","App","sceneSetup","el","clientWidth","clientHeight","scene","THREE","camera","position","x","y","z","lookAt","renderer","setSize","fog","setClearColor","color","appendChild","domElement","addCustomSceneObjects","nebulaText","load","smoke","nebulaGeo","nebulaMat","map","transparent","group","nebulaParticles","i","nebula","set","Math","random","rotation","PI","material","opacity","side","push","add","texture","bg01","spacesphereGeo","spacesphereMat","spacesphere","wrapS","wrapT","repeat","texture2","bg02","spacesphereGeo2","spacesphereMat2","spacesphere2","lights","intensity","forEach","startAnimationLoop","requestAnimationFrame","render","handleWindowResize","aspect","updateProjectionMatrix","this","window","addEventListener","removeEventListener","cancelAnimationFrame","requestID","ref","Component","Container","state","isMounted","onClick","setState","React","rootElement","document","getElementById","ReactDOM","Boolean","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,oOCOrCC,EAAQ,CACZC,OAAQ,QACRC,MAAO,QAGHC,E,2MAaJC,WAAa,WACX,IAAMF,EAAQ,EAAKG,GAAGC,YAChBL,EAAS,EAAKI,GAAGE,aAEvB,EAAKC,MAAQ,IAAIC,IACjB,EAAKC,OAAS,IAAID,IAAwB,GAAIP,EAAQD,EAAQ,GAAK,KACnE,EAAKS,OAAOC,SAASC,EAAI,EACzB,EAAKF,OAAOC,SAASE,EAAI,EACzB,EAAKH,OAAOC,SAASG,GAAK,GAC1B,EAAKJ,OAAOK,OAAO,EAAKP,MAAMG,UAE9B,EAAKK,SAAW,IAAIP,IACpB,EAAKO,SAASC,QAAQf,EAAOD,GAG7B,EAAKO,MAAMU,IAAM,IAAIT,IAAc,QAAU,MAC7C,EAAKO,SAASG,cAAc,EAAKX,MAAMU,IAAIE,OAE3C,EAAKf,GAAGgB,YAAY,EAAKL,SAASM,a,EAGpCC,sBAAwB,WAEtB,IAAMC,GAAa,IAAIf,KAAsBgB,KAAKC,KAC5CC,EAAY,IAAIlB,IAA0B,IAAK,KAC/CmB,EAAY,IAAInB,IAA0B,CAC9CoB,IAAKL,EACLM,aAAa,IAETC,EAAQ,IAAItB,IAElB,EAAKuB,gBAAkB,GAEvB,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAIC,EAAS,IAAIzB,IAAWkB,EAAWC,GACvCM,EAAOvB,SAASwB,IACE,IAAhBC,KAAKC,SAAiB,IACN,IAAhBD,KAAKC,SAAiB,IACN,IAAhBD,KAAKC,SAAiB,KAExBH,EAAOI,SAASxB,EAAoB,EAAhBsB,KAAKC,SAAeD,KAAKG,GAC7CL,EAAOM,SAASC,QAAU,IAC1BP,EAAOM,SAASE,KAAOjC,IACvB,EAAKuB,gBAAgBW,KAAKT,GAC1BH,EAAMa,IAAIV,GAGZ,IAAMW,GAAU,IAAIpC,KAAsBgB,KAAKqB,KACzCC,EAAiB,IAAItC,IAAqB,GAAI,GAAI,IAClDuC,EAAiB,IAAIvC,IAAwB,CACjDoB,IAAKgB,EACLf,aAAa,EACbY,KAAMjC,MAER,EAAKwC,YAAc,IAAIxC,IAAWsC,EAAgBC,GAClD,EAAKC,YAAYT,SAASX,IAAIqB,MAAQzC,IACtC,EAAKwC,YAAYT,SAASX,IAAIsB,MAAQ1C,IACtC,EAAKwC,YAAYT,SAASX,IAAIuB,OAAOjB,IAAI,EAAG,GAI5C,IAAMkB,GAAW,IAAI5C,KAAsBgB,KAAK6B,KAC1CC,EAAkB,IAAI9C,IAAqB,GAAI,GAAI,IACnD+C,EAAkB,IAAI/C,IAAwB,CAClDoB,IAAKwB,EACLvB,aAAa,EACbY,KAAMjC,MAER,EAAKgD,aAAe,IAAIhD,IAAW8C,EAAiBC,GACpD,EAAKC,aAAajB,SAASX,IAAIqB,MAAQzC,IACvC,EAAKgD,aAAajB,SAASX,IAAIsB,MAAQ1C,IACvC,EAAKgD,aAAajB,SAASX,IAAIuB,OAAOjB,IAAI,EAAG,GAI7C,EAAK3B,MAAMoC,IAAIb,GAEf,IAAM2B,EAAS,GAEfA,EAAO,GAAK,IAAIjD,IAAmB,SACnCiD,EAAO,GAAG/C,SAASwB,IAAI,IAAK,GAAI,IAChCuB,EAAO,GAAGC,UAAY,EAEtBD,EAAO,GAAK,IAAIjD,IAAuB,UACvCiD,EAAO,GAAG/C,SAASwB,IAAI,EAAG,EAAG,GAE7BuB,EAAO,GAAK,IAAIjD,IAAiB,SAAU,GAAI,IAAK,KACpDiD,EAAO,GAAG/C,SAASwB,IAAI,EAAG,EAAG,GAE7BuB,EAAO,GAAK,IAAIjD,IAAiB,SAAU,IAAK,IAAK,GACrDiD,EAAO,GAAG/C,SAASwB,IAAI,IAAK,IAAK,KAEjCuB,EAAO,GAAK,IAAIjD,IAAiB,SAAU,GAAI,IAAK,GACpDiD,EAAO,GAAG/C,SAASwB,IAAI,IAAK,IAAK,KAEjCuB,EAAOE,SAAQ,SAAAvD,GACb,EAAKG,MAAMoC,IAAIvC,O,EAInBwD,mBAAqB,WACnBC,sBAAsB,EAAKD,oBAC3B,EAAK7B,gBAAgB4B,SAAQ,SAAAvD,GAAE,OAAKA,EAAGiC,SAASxB,GAAK,QACrD,EAAKmC,YAAYX,SAASzB,GAAK,KAC/B,EAAK4C,aAAanB,SAASzB,GAAK,KAEhC,EAAKG,SAAS+C,OAAO,EAAKvD,MAAO,EAAKE,S,EAGxCsD,mBAAqB,WACnB,IAAM9D,EAAQ,EAAKG,GAAGC,YAChBL,EAAS,EAAKI,GAAGE,aAEvB,EAAKS,SAASC,QAAQf,EAAOD,GAC7B,EAAKS,OAAOuD,OAAS/D,EAAQD,EAE7B,EAAKS,OAAOwD,0B,mFA/HZC,KAAK/D,aACL+D,KAAK5C,wBACL4C,KAAKN,qBACLO,OAAOC,iBAAiB,SAAUF,KAAKH,sB,6CAIvCI,OAAOE,oBAAoB,SAAUH,KAAKH,oBAC1CI,OAAOG,qBAAqBJ,KAAKK,a,+BA0HzB,IAAD,OACP,OAAO,yBAAKxE,MAAOA,EAAOyE,IAAK,SAAAA,GAAG,OAAK,EAAKpE,GAAKoE,S,GArInCC,aAyIZC,E,2MACJC,MAAQ,CAAEC,WAAW,G,wEAEX,IAAD,SACsBV,KAAKS,MAA1BC,iBADD,SAEP,OACE,oCACE,4BACEC,QAAS,kBACP,EAAKC,UAAS,SAAAH,GAAK,MAAK,CAAEC,WAAYD,EAAMC,gBAG7CA,EAAY,UAAY,SAE1BA,GAAa,kBAAC,EAAD,MACbA,GAAa,oE,GAfEG,IAAMN,WAqBxBO,EAAcC,SAASC,eAAe,QAC5CC,IAASrB,OAAO,kBAAC,EAAD,MAAekB,GAEhB9E,QCjKKkF,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNJ,IAASrB,OAAO,kBAAC,EAAD,MAASmB,SAASC,eAAe,SD2H3C,kBAAmBM,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8ed18784.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg01B.b1d96495.png\";","module.exports = __webpack_public_path__ + \"static/media/bg02.c9964f80.png\";","module.exports = __webpack_public_path__ + \"static/media/smoke-1.0323b88d.png\";","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport bg01 from \"./img/bg01B.png\";\nimport bg02 from \"./img/bg02.png\";\nimport smoke from \"./img/smoke-1.png\";\n\nconst style = {\n  height: \"100vh\",\n  width: \"100%\"\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.sceneSetup();\n    this.addCustomSceneObjects();\n    this.startAnimationLoop();\n    window.addEventListener(\"resize\", this.handleWindowResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n  }\n\n  sceneSetup = () => {\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 1000);\n    this.camera.position.x = 0;\n    this.camera.position.y = 0;\n    this.camera.position.z = -12;\n    this.camera.lookAt(this.scene.position);\n\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(width, height);\n\n    // ambient color\n    this.scene.fog = new THREE.FogExp2(0x741523, 0.001);\n    this.renderer.setClearColor(this.scene.fog.color);\n\n    this.el.appendChild(this.renderer.domElement);\n  };\n\n  addCustomSceneObjects = () => {\n    //nebula\n    const nebulaText = new THREE.TextureLoader().load(smoke);\n    const nebulaGeo = new THREE.PlaneBufferGeometry(500, 500);\n    const nebulaMat = new THREE.MeshLambertMaterial({\n      map: nebulaText,\n      transparent: true\n    });\n    const group = new THREE.Group();\n\n    this.nebulaParticles = [];\n\n    for (let i = 0; i < 10; i++) {\n      let nebula = new THREE.Mesh(nebulaGeo, nebulaMat);\n      nebula.position.set(\n        Math.random() * 500 - 250,\n        Math.random() * 300 - 100,\n        Math.random() * 200 + 300\n      );\n      nebula.rotation.z = Math.random() * 2 * Math.PI;\n      nebula.material.opacity = 0.55;\n      nebula.material.side = THREE.DoubleSide;\n      this.nebulaParticles.push(nebula);\n      group.add(nebula);\n    }\n    // fisrt sphere\n    const texture = new THREE.TextureLoader().load(bg01);\n    const spacesphereGeo = new THREE.SphereGeometry(18, 20, 20);\n    const spacesphereMat = new THREE.MeshPhongMaterial({\n      map: texture,\n      transparent: true,\n      side: THREE.DoubleSide\n    });\n    this.spacesphere = new THREE.Mesh(spacesphereGeo, spacesphereMat);\n    this.spacesphere.material.map.wrapS = THREE.RepeatWrapping;\n    this.spacesphere.material.map.wrapT = THREE.RepeatWrapping;\n    this.spacesphere.material.map.repeat.set(5, 4);\n    //group.add(this.spacesphere);\n\n    //second sphere\n    const texture2 = new THREE.TextureLoader().load(bg02);\n    const spacesphereGeo2 = new THREE.SphereGeometry(15, 20, 20); //ajustar tamaño y posición de la camara para que funcione bien\n    const spacesphereMat2 = new THREE.MeshPhongMaterial({\n      map: texture2,\n      transparent: true,\n      side: THREE.DoubleSide\n    });\n    this.spacesphere2 = new THREE.Mesh(spacesphereGeo2, spacesphereMat2);\n    this.spacesphere2.material.map.wrapS = THREE.RepeatWrapping;\n    this.spacesphere2.material.map.wrapT = THREE.RepeatWrapping;\n    this.spacesphere2.material.map.repeat.set(7, 6);\n    //group.add(this.spacesphere2);\n\n    //add all elements to scene\n    this.scene.add(group);\n\n    const lights = [];\n\n    lights[0] = new THREE.AmbientLight(0x555555);\n    lights[0].position.set(60, -10, 20);\n    lights[0].intensity = 1;\n\n    lights[1] = new THREE.DirectionalLight(0xb97a84);\n    lights[1].position.set(0, 0, 1);\n\n    lights[2] = new THREE.PointLight(0xb97a84, 50, 350, 1.7);\n    lights[2].position.set(0, 0, 0);\n\n    lights[3] = new THREE.PointLight(0xb97a84, 100, 250, 3);\n    lights[3].position.set(100, 300, 100);\n\n    lights[4] = new THREE.PointLight(0xb97a84, 50, 350, 3);\n    lights[4].position.set(300, 100, 200);\n\n    lights.forEach(el => {\n      this.scene.add(el);\n    });\n  };\n\n  startAnimationLoop = () => {\n    requestAnimationFrame(this.startAnimationLoop);\n    this.nebulaParticles.forEach(el => (el.rotation.z -= 0.001));\n    this.spacesphere.rotation.y += 0.0002;\n    this.spacesphere2.rotation.y += 0.0003;\n\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  handleWindowResize = () => {\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n\n    this.renderer.setSize(width, height);\n    this.camera.aspect = width / height;\n\n    this.camera.updateProjectionMatrix();\n  };\n\n  render() {\n    return <div style={style} ref={ref => (this.el = ref)} />;\n  }\n}\n\nclass Container extends React.Component {\n  state = { isMounted: true };\n\n  render() {\n    const { isMounted = true } = this.state;\n    return (\n      <>\n        <button\n          onClick={() =>\n            this.setState(state => ({ isMounted: !state.isMounted }))\n          }\n        >\n          {isMounted ? \"Unmount\" : \"Mount\"}\n        </button>\n        {isMounted && <App />}\n        {isMounted && <div>Scroll to zoom, drag to rotate</div>}\n      </>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Container />, rootElement);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}