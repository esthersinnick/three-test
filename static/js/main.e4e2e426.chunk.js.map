{"version":3,"sources":["img/bg01B.png","img/bg02.png","img/bg03.png","img/smoke-1.png","img/bg01.jpg","img/bg-plane.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","style","height","width","App","sceneSetup","el","clientWidth","clientHeight","scene","THREE","camera","renderer","setSize","fog","setClearColor","color","appendChild","domElement","addCustomSceneObjects","nebulaText","load","smoke","nebulaGeo","nebulaMat","map","transparent","group","nebulaParticles","i","nebula","position","set","Math","random","rotation","z","PI","material","opacity","side","push","add","console","log","texture","bg01","spacesphereGeo","spacesphereMat","alphaTest","spacesphere","texture2","bg02","spacesphereGeo2","spacesphereMat2","spacesphere2","texture3","bg03","spacesphereGeo3","spacesphereMat3","spacesphere3","wrapS","wrapT","repeat","x","y","lookAt","lights","intensity","startAnimationLoop","requestAnimationFrame","forEach","render","handleWindowResize","aspect","updateProjectionMatrix","this","window","addEventListener","removeEventListener","cancelAnimationFrame","requestID","ref","Component","Container","state","isMounted","onClick","setState","React","rootElement","document","getElementById","ReactDOM","Boolean","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4e2e426.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg01B.b1d96495.png\";","module.exports = __webpack_public_path__ + \"static/media/bg02.c9964f80.png\";","module.exports = __webpack_public_path__ + \"static/media/bg03.cb85ae78.png\";","module.exports = __webpack_public_path__ + \"static/media/smoke-1.0323b88d.png\";","module.exports = __webpack_public_path__ + \"static/media/bg01.d8934fea.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg-plane.4a1967fb.jpg\";","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport bg01 from \"./img/bg01B.png\";\nimport bg04 from \"./img/bg01.jpg\";\nimport bg02 from \"./img/bg02.png\";\nimport bg03 from \"./img/bg03.png\";\nimport bgPlane from \"./img/bg-plane.jpg\";\nimport smoke from \"./img/smoke-1.png\";\n\nconst style = {\n  height: \"100vh\",\n  width: \"100%\"\n  // we can control scene size by setting container dimensions\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.sceneSetup();\n    this.addCustomSceneObjects();\n    this.startAnimationLoop();\n    window.addEventListener(\"resize\", this.handleWindowResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    // this.controls.dispose();\n  }\n\n  sceneSetup = () => {\n    // get container dimensions and use them for scene sizing\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(\n      45, // fov = field of view\n      width / height, // aspect ratio\n      0.1, // near plane\n      1000 // far plane\n    );\n\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(width, height);\n\n    // ambient color\n    this.scene.fog = new THREE.FogExp2(0x741523, 0.001);\n    this.renderer.setClearColor(this.scene.fog.color);\n\n    this.el.appendChild(this.renderer.domElement); // mount using React ref\n  };\n\n  addCustomSceneObjects = () => {\n    //nebula\n    const nebulaText = new THREE.TextureLoader().load(smoke);\n    const nebulaGeo = new THREE.PlaneBufferGeometry(500, 500);\n    const nebulaMat = new THREE.MeshLambertMaterial({\n      map: nebulaText,\n      transparent: true\n    });\n    const group = new THREE.Group();\n\n    this.nebulaParticles = [];\n\n    //loop for create 50 nebula particles\n    for (let i = 0; i < 20; i++) {\n      let nebula = new THREE.Mesh(nebulaGeo, nebulaMat);\n\n      nebula.position.set(\n        Math.random() * 500 - 250,\n        Math.random() * 300 - 100,\n        Math.random() * 200 + 300\n      );\n      nebula.rotation.z = Math.random() * 2 * Math.PI;\n      nebula.material.opacity = 0.55;\n      nebula.material.side = THREE.DoubleSide;\n\n      this.nebulaParticles.push(nebula);\n      group.add(nebula);\n    }\n    console.log(group);\n    //background plane\n    // const texture0 = new THREE.TextureLoader().load(bg04);\n    // const planeGeo = new THREE.PlaneGeometry(50, 25);\n    // const planeMat = new THREE.MeshPhongMaterial({ map: texture0 });\n    // this.plane = new THREE.Mesh(planeGeo, planeMat);\n    // this.plane.position.set(0, 0, 22);\n\n    // fisrt sphere\n    const texture = new THREE.TextureLoader().load(bg01);\n    const spacesphereGeo = new THREE.SphereGeometry(18, 20, 20);\n    const spacesphereMat = new THREE.MeshPhongMaterial({\n      map: texture,\n      alphaTest: 0, //Antes estaba a 0.5\n      transparent: true,\n      side: THREE.DoubleSide\n    });\n    this.spacesphere = new THREE.Mesh(spacesphereGeo, spacesphereMat);\n\n    //second sphere\n    const texture2 = new THREE.TextureLoader().load(bg02);\n    const spacesphereGeo2 = new THREE.SphereGeometry(15, 20, 20); //ajustar tama침o y posici칩n de la camara para que funcione bien\n    const spacesphereMat2 = new THREE.MeshPhongMaterial({\n      map: texture2,\n      alphaTest: 0, //Antes estaba a 0.5\n      transparent: true,\n      side: THREE.DoubleSide\n    });\n    this.spacesphere2 = new THREE.Mesh(spacesphereGeo2, spacesphereMat2);\n\n    //third sphere\n    const texture3 = new THREE.TextureLoader().load(bg03);\n    const spacesphereGeo3 = new THREE.SphereGeometry(14, 20, 20); //ajustar tama침o y posici칩n de la camara para que funcione bien\n    const spacesphereMat3 = new THREE.MeshPhongMaterial({\n      map: texture3,\n      alphaTest: 0, //Antes estaba a 0.5\n      transparent: true,\n      side: THREE.DoubleSide\n    });\n    this.spacesphere3 = new THREE.Mesh(spacesphereGeo3, spacesphereMat3);\n\n    //spacesphere needs to be double sided as the camera is within the spacesphere\n    // this.plane.material.side = THREE.DoubleSide;\n    this.spacesphere.material.side = THREE.DoubleSide;\n    this.spacesphere2.material.side = THREE.DoubleSide;\n    this.spacesphere3.material.side = THREE.DoubleSide;\n\n    this.spacesphere.material.map.wrapS = THREE.RepeatWrapping;\n    this.spacesphere.material.map.wrapT = THREE.RepeatWrapping;\n    this.spacesphere.material.map.repeat.set(5, 4);\n\n    this.spacesphere2.material.map.wrapS = THREE.RepeatWrapping;\n    this.spacesphere2.material.map.wrapT = THREE.RepeatWrapping;\n    this.spacesphere2.material.map.repeat.set(7, 6);\n\n    this.spacesphere3.material.map.wrapS = THREE.RepeatWrapping;\n    this.spacesphere3.material.map.wrapT = THREE.RepeatWrapping;\n    this.spacesphere3.material.map.repeat.set(10, 8);\n\n    //group.add(this.plane);\n    group.add(this.spacesphere);\n    group.add(this.spacesphere2);\n    //group.add(this.spacesphere3);\n\n    this.scene.add(group);\n\n    this.camera.position.x = 0;\n    this.camera.position.y = 0;\n    this.camera.position.z = -12;\n    this.camera.lookAt(this.scene.position);\n\n    const lights = [];\n\n    lights[0] = new THREE.SpotLight(0xff704d);\n    lights[0].position.set(-40, 60, -10);\n    lights[0].intensity = 1.2;\n\n    lights[1] = new THREE.SpotLight(0x9e3364);\n    lights[1].position.set(60, -10, 20);\n    lights[1].intensity = 1.3;\n\n    lights[2] = new THREE.AmbientLight(0x555555);\n    lights[2].position.set(60, -10, 20);\n    lights[2].intensity = 1;\n\n    lights[3] = new THREE.DirectionalLight(0xb97a84);\n    lights[3].position.set(0, 0, 1);\n    this.scene.add(lights[3]);\n\n    lights[4] = new THREE.PointLight(0xb97a84, 50, 350, 1.7);\n    lights[4].position.set(0, 0, 0);\n    this.scene.add(lights[4]);\n\n    lights[5] = new THREE.PointLight(0xb97a84, 100, 250, 3);\n    lights[5].position.set(100, 300, 100);\n    this.scene.add(lights[5]);\n\n    lights[6] = new THREE.PointLight(0xb97a84, 50, 350, 3);\n    lights[6].position.set(300, 100, 200);\n    this.scene.add(lights[6]);\n\n    //this.scene.add(lights[0]);\n    //this.scene.add(lights[1]);\n    this.scene.add(lights[2]);\n  };\n\n  startAnimationLoop = () => {\n    requestAnimationFrame(this.startAnimationLoop);\n    this.nebulaParticles.forEach(el => (el.rotation.z -= 0.001));\n    this.spacesphere.rotation.y += 0.0002;\n    this.spacesphere2.rotation.y += 0.0003;\n    this.spacesphere3.rotation.y += 0.00045;\n\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  handleWindowResize = () => {\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n\n    this.renderer.setSize(width, height);\n    this.camera.aspect = width / height;\n\n    this.camera.updateProjectionMatrix();\n  };\n\n  render() {\n    return <div style={style} ref={ref => (this.el = ref)} />;\n  }\n}\n\nclass Container extends React.Component {\n  state = { isMounted: true };\n\n  render() {\n    const { isMounted = true } = this.state;\n    return (\n      <>\n        <button\n          onClick={() =>\n            this.setState(state => ({ isMounted: !state.isMounted }))\n          }\n        >\n          {isMounted ? \"Unmount\" : \"Mount\"}\n        </button>\n        {isMounted && <App />}\n        {isMounted && <div>Scroll to zoom, drag to rotate</div>}\n      </>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Container />, rootElement);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}